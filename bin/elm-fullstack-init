#!/usr/bin/env node

const path = require('path')
var clients = {
  'application': '../src/Application.elm',
  'document': '../src/Document.elm',
  'element': '../src/Element.elm'
}
var binName = process.argv[1]
var clientType = process.argv[2]
var dst = process.argv[3]
if (!dst || (!clients[clientType])) {
  console.log('usage:', path.basename(binName), '<application|document|element>', '<directory to initialize>')
  process.exit(1)
}
console.log('Initializing', dst, '...\n')
const src = path.join(dst, 'src')
var client = clients[clientType]

const fs = require('fs')
fs.mkdirSync(dst)
fs.mkdirSync(src)
fs.writeFileSync(dst + `/Makefile`, `run: compile
	node index.js

compile: elm.json package.json build/Server.js public/assets/client.js

build/Server.js: src/Server.elm
	elm make src/Server.elm --output build/Server.js

public/assets/client.js: src/Client.elm
	elm make src/Client.elm --output public/assets/client.js

#

install: elm.json package.json
	elm install elm/url
	elm install elm/json
	elm install elm/http
	elm install elm/time
	elm install choonkeat/elm-fullstack

elm.json:
	elm init

package.json:
	npm init -y && npm install --save xhr2 full-url node-static websocket
`)

fs.writeFileSync(dst + `/index.js`, `global.XMLHttpRequest = require('xhr2')

// define http server
const http = require('http')
const fullUrl = require('full-url')
const nodeStatic = require('node-static')
const fileServer = new nodeStatic.Server('./public')
const WebSocketServer = require('websocket').server

function httpServer (app) {
  if (!app.ports) return console.log('no ports!')

  // Start http server, accept requests and pass to Elm
  const server = http.createServer((req, res) => {
    const body = [] // https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/#request-body
    req.on('data', (chunk) => {
      body.push(chunk)
    }).on('end', () => {
      fileServer.serve(req, res, function (e) {
        // if static file is found by fileServer, serve it
        if (!e || e.status !== 404) return

        // otherwise, Fullstack.Server will handle the request
        const contentType = req.headers['content-type'] || ''
        const encoding = (contentType.match(/; charset=(\\S+)/) || ['', 'utf8'])[1] // charset or default to "utf8"
        const bodyString = Buffer.concat(body).toString(encoding)
        app.ports.onHttpRequest.send({
          response: res, // this value will be used by "onHttpResponse" below
          method: req.method,
          url: fullUrl(req),
          path: req.url,
          body: bodyString,
          headers: req.headers
        })
      })
    }).resume()
  })
  app.ports.onHttpResponse.subscribe(({ statusCode, body, headers, request }) => {
    console.log('[http] onHttpResponse status=', statusCode, Buffer.byteLength(body), 'bytes')
    request.response.writeHead(statusCode, { ...headers, 'Content-Length': Buffer.byteLength(body) })
    request.response.end(body)
  })

  if (app.ports.writeWs) {
    app.ports.writeWs.subscribe(({ key, connection, body }) => {
      console.log('[ws] writeWs key=', key, body)
      connection.sendUTF(body)
    })
  }

  var wsServer
  if (app.ports.onWebsocketEvent) {
    wsServer = new WebSocketServer({
      // WebSocket server is tied to a HTTP server. WebSocket request is just
      // an enhanced HTTP request. For more info http://tools.ietf.org/html/rfc6455#page-6
      httpServer: server
    })

    // Start websocket server, accept requests and pass to Elm
    wsServer.on('request', function (request) {
      console.log('[ws] Connection from origin ' + request.origin + '.', request.key)

      // accept connection - you should check 'request.origin' to make sure that
      // client is connecting from your website
      // (http://en.wikipedia.org/wiki/Same_origin_policy)
      if (request.origin !== 'http://localhost:8000' && false) {
        request.reject()
        console.log((new Date()) + ' Connection from origin ' + request.origin + ' rejected.')
        return
      }

      var connection = request.accept(null, request.origin)
      app.ports.onWebsocketEvent.send({
        open: connection,
        key: request.key,
        headers: (request.httpRequest || {}).headers
      })

      // user sent some message
      connection.on('message', function (payload) {
        console.log('[ws] payload', payload)
        app.ports.onWebsocketEvent.send({
          message: connection,
          key: request.key,
          payload: payload
        })
      })
      // user disconnected
      // https://github.com/theturtle32/WebSocket-Node/blob/1f7ffba2f7a6f9473bcb39228264380ce2772ba7/docs/WebSocketConnection.md#close
      connection.on('close', function (reasonCode, description) {
        console.log('[ws] close', reasonCode, description)
        app.ports.onWebsocketEvent.send({
          reasonCode,
          description,
          close: connection,
          key: request.key
        })
      })
    })
  }

  var port = process.env.PORT || 8000
  server.listen(port)
  console.log('[http] server listening at', port, '...')

  const shutdown = () => {
    console.info('[http] signal received.')
    if (app.ports.onWebsocketEvent) {
      wsServer.unmount()
      console.log('[ws] server unmounted.')
    }
    server.close(() => {
      console.log('[http] server closed.')
      process.exit(0) // not great, but there are Timers dangling and won't quit
    })
    if (app.ports.onWebsocketEvent) {
      wsServer.shutDown()
      console.log('[ws] server shutdown.')
    }
  }

  process.on('SIGTERM', shutdown)
  process.on('SIGINT', shutdown)
}

// regular elm initialization
const { Elm } = require('./build/Server.js')
httpServer(Elm.Server.init({
  flags: {}
}))
`)

fs.writeFileSync(src + `/Server.elm`, `port module Server exposing (..)

import Fullstack.Server
import Fullstack.Server.HTTP exposing (Method(..), StatusCode(..))
import Json.Decode
import Json.Encode
import Platform exposing (Task)
import Task
import Time
import Types exposing (MsgFromServer)
import Url



-- port onWebsocketEvent : (Json.Encode.Value -> msg) -> Sub msg
--
--
-- port writeWs : Json.Encode.Value -> Cmd msg
--
--
-- writeWebsocketMessage =
--     Fullstack.Server.writeWebsocketMessage writeWs


port onHttpRequest : (Json.Encode.Value -> msg) -> Sub msg


port onHttpResponse : Json.Encode.Value -> Cmd msg


writeResponse =
    Fullstack.Server.writeResponse onHttpResponse


main =
    Fullstack.Server.worker
        { worker =
            { init = init
            , update = update
            , subscriptions = subscriptions
            }
        , ports =
            { writeResponse = writeResponse
            , onHttpRequest = onHttpRequest
            , onWebsocketEvent = \\_ -> Sub.none -- onWebsocketEvent
            , writeWebsocketMessage = \\_ _ _ -> Cmd.none -- writeWebsocketMessage
            }
        , protocol =
            { routeDecoder = routeDecoder
            , updateFromRoute = updateFromRoute
            , updateFromClient = updateFromClient
            , serverMsgEncoder = Types.encodeTypesMsgFromServer
            , clientMsgDecoder = Types.decodeTypesMsgFromClient
            , headerDecoder = headerDecoder
            , errorEncoder = Json.Encode.string
            }
        }


type alias Flags =
    {}


type alias ServerState =
    { greeting : String
    }


type Msg
    = Msg



-- Platform.worker


init : Flags -> ( ServerState, Cmd Msg )
init flags =
    let
        serverState =
            { greeting = "Hello world" }

        cmd =
            Cmd.none
    in
    ( serverState, cmd )


update : Msg -> ServerState -> ( ServerState, Cmd Msg )
update msg serverState =
    case msg of
        Msg ->
            ( serverState, Cmd.none )


subscriptions : ServerState -> Sub Msg
subscriptions serverState =
    Sub.none



-- Server-side route and update function


type Route
    = Homepage


routeDecoder : Url.Url -> Maybe Route
routeDecoder urlUrl =
    case urlUrl.path of
        "/" ->
            Just Homepage

        _ ->
            Nothing


updateFromRoute : ( Fullstack.Server.HTTP.Method, Types.RequestContext, Maybe Route ) -> Time.Posix -> Fullstack.Server.HTTP.Request -> ServerState -> ( ServerState, Cmd Msg )
updateFromRoute ( method, ctx, route ) now request serverState =
    case ( method, ctx, route ) of
        ( GET, _, _ ) ->
            ( serverState
            , writeResponse request
                { statusCode = StatusOK
                , body = spaHtml
                , headers =
                    [ ( "Content-Type", Json.Encode.string "text/html; charset=utf-8" )
                    , ( "Cache-Control", Json.Encode.string "max-age=0" )
                    ]
                }
            )

        -- TODO: possibly a (POST, _, Login) to "Set-Cookie"
        ( _, _, _ ) ->
            ( serverState
            , writeResponse request { statusCode = StatusNotFound, body = "Not found?", headers = [] }
            )



-- MsgFromClient update function


updateFromClient : Types.RequestContext -> Time.Posix -> Types.MsgFromClient -> ServerState -> ( ServerState, Task String MsgFromServer )
updateFromClient ctx now clientMsg serverState =
    case clientMsg of
        Types.SetGreeting s ->
            ( { serverState | greeting = s }
            , Task.succeed (Types.CurrentGreeting ("You said: <" ++ s ++ "> at " ++ Debug.toString now))
            )



--


headerDecoder : Json.Decode.Decoder Types.RequestContext
headerDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map Types.Cookied (Json.Decode.field "cookie" Json.Decode.string)
        , Json.Decode.succeed Types.Anonymous
        ]


spaHtml =
    """
    <!DOCTYPE HTML>
    <html>
    <head>
      <meta charset="UTF-8">
      <title>create-elm-server</title>
      <script src="/assets/client.js?JS_SHA"></script>
      <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    </head>
    <body>
    <div id="elm"></div>
    <script>
    var now = new Date()
    var app = Elm.Client.init({
      node: document.getElementById('elm'),
      flags: {}
    });

    if (window.WebSocket && app.ports && app.ports.websocketOut) {
      console.log('[js websocket]', window.WebSocket)
      ;(function (app, WebSocket) {
        var ws = {}
        app.ports.websocketOut.subscribe(function (msg) {
          try {
            console.log('[js websocket] send', msg)
            ws.conn.send(msg)
          } catch (e) {
            console.log('[js websocket] send fail', e) // e.g. ws.conn not established
          }
        })
        function connectWebSocket (app, wsUrl, optionalProtocol) {
          ws.conn = new WebSocket(wsUrl, optionalProtocol)
          ws.conn.onopen = function (event) {
            console.log('[js websocket] connected', event)
            app.ports.websocketConnected.send(event.timeStamp | 0)
          }
          ws.conn.onmessage = function (event) {
            console.log('[js websocket] message', event)
            app.ports.websocketIn.send(event.data)
          }
          ws.conn.onerror = function (event) {
            console.log('[js websocket] error', event)
          }
          ws.conn.onclose = function (event) {
            console.log('[js websocket] close', event)
            ws.conn.onclose = null
            ws.conn = null
            setTimeout(function () {
              console.log('[js websocket] retrying...')
              connectWebSocket(app, wsUrl, optionalProtocol)
            }, 1000)
          }
        }
        connectWebSocket(app, (window.location.protocol === 'https:' ? 'wss' : 'ws') + '://' + window.location.host)
      })(app, window.WebSocket)
    }

    </script>
    </body>
    </html>
    """
`)

fs.writeFileSync(src + `/Client.elm`, clientContent(clientType).replace(/^module \w+/, 'module Client'))
fs.writeFileSync(src + `/Types.elm`, clientContent('src/Types.elm'))

console.log(`
now execute:

  1. cd ${dst}
  2. make install
  3. make
`)

function clientContent(key) {
  const dict = {"src/Types.elm":"module Types exposing (..)\n\nimport Json.Decode\nimport Json.Encode\n\n\n{-| All messages that Client can send to Server\n-}\ntype MsgFromClient\n    = SetGreeting String\n\n\n{-| All messages that Server can reply to Client\n-}\ntype MsgFromServer\n    = CurrentGreeting String\n\n\n{-| Http headers will be parsed into a RequestContext\nFailure to parse means error; keep an always successful scenario, e.g. Anonymous\n-}\ntype RequestContext\n    = Cookied String\n    | Anonymous\n\n\n\n-- Encoder/Decoder\n-- consider using \"npx elm-auto-encoder-decoder src/Types.elm\" instead\n\n\nencodeTypesMsgFromServer : MsgFromServer -> Json.Encode.Value\nencodeTypesMsgFromServer v =\n    case v of\n        CurrentGreeting s ->\n            Json.Encode.list identity\n                [ Json.Encode.string \"Types.CurrentGreeting\", Json.Encode.string s ]\n\n\ndecodeTypesMsgFromServer : Json.Decode.Decoder MsgFromServer\ndecodeTypesMsgFromServer =\n    Json.Decode.index 0 Json.Decode.string\n        |> Json.Decode.andThen\n            (\\word ->\n                case word of\n                    \"Types.CurrentGreeting\" ->\n                        Json.Decode.map CurrentGreeting\n                            (Json.Decode.index 1 Json.Decode.string)\n\n                    _ ->\n                        Json.Decode.fail \"Invalid MsgFromServer\"\n            )\n\n\nencodeTypesMsgFromClient : MsgFromClient -> Json.Encode.Value\nencodeTypesMsgFromClient v =\n    case v of\n        SetGreeting s ->\n            Json.Encode.list identity\n                [ Json.Encode.string \"Types.SetGreeting\", Json.Encode.string s ]\n\n\ndecodeTypesMsgFromClient : Json.Decode.Decoder MsgFromClient\ndecodeTypesMsgFromClient =\n    Json.Decode.index 0 Json.Decode.string\n        |> Json.Decode.andThen\n            (\\word ->\n                case word of\n                    \"Types.SetGreeting\" ->\n                        Json.Decode.map SetGreeting\n                            (Json.Decode.index 1 Json.Decode.string)\n\n                    _ ->\n                        Json.Decode.fail \"Invalid MsgFromClient\"\n            )\n","application":"module Application exposing (..)\n\nimport Browser\nimport Browser.Navigation\nimport Fullstack.Client\nimport Html exposing (Html, button, div, form, input, text)\nimport Html.Attributes exposing (type_)\nimport Html.Events exposing (onClick, onInput, onSubmit)\nimport Http\nimport Json.Decode\nimport Json.Encode\nimport Platform exposing (Task)\nimport Task\nimport Types\nimport Url\n\n\n\n-- port websocketConnected : (Int -> msg) -> Sub msg\n--\n--\n-- port websocketIn : (String -> msg) -> Sub msg\n--\n--\n-- port websocketOut : String -> Cmd msg\n\n\nfullstack =\n    Fullstack.Client.application\n        { application =\n            { init = init\n            , view = view\n            , update = update\n            , subscriptions = subscriptions\n            , onUrlRequest = OnUrlRequest\n            , onUrlChange = OnUrlChange\n            }\n        , ports =\n            { websocketConnected = \\_ -> Sub.none -- websocketConnected\n            , websocketIn = \\_ -> Sub.none -- websocketIn\n            }\n        , protocol =\n            { updateFromServer = updateFromServer\n            , clientMsgEncoder = Types.encodeTypesMsgFromClient\n            , serverMsgDecoder = Types.decodeTypesMsgFromServer\n            , errorDecoder = Json.Decode.string\n            }\n        }\n\n\nmain =\n    fullstack.application\n\n\n{-| Clients send messages to Server with this\n-}\nsendToServer : Types.MsgFromClient -> Task Http.Error (Result String Types.MsgFromServer)\nsendToServer =\n    fullstack.sendToServer\n\n\ntype alias Flags =\n    {}\n\n\ntype alias Model =\n    { navKey : Browser.Navigation.Key\n    , greeting : String\n    , serverGreeting : String\n    }\n\n\ntype Msg\n    = OnUrlRequest Browser.UrlRequest\n    | OnUrlChange Url.Url\n    | OnMsgFromServer (Result Http.Error (Result String Types.MsgFromServer))\n    | SendMessage Types.MsgFromClient\n    | SetGreeting String\n\n\ninit : Flags -> Url.Url -> Browser.Navigation.Key -> ( Model, Cmd Msg )\ninit flags url navKey =\n    ( { navKey = navKey\n      , greeting = \"\"\n      , serverGreeting = \"\"\n      }\n    , Cmd.none\n    )\n\n\nview : Model -> Browser.Document Msg\nview model =\n    Browser.Document \"Elm Fullstack Client\"\n        [ form [ onSubmit (SendMessage (Types.SetGreeting model.greeting)) ]\n            [ input [ onInput SetGreeting ] []\n            , button [ type_ \"submit\" ] [ text \"Send to server\" ]\n            ]\n        , if model.serverGreeting == \"\" then\n            text \"\"\n\n          else\n            div []\n                [ text \"Server reply: \"\n                , text model.serverGreeting\n                ]\n        ]\n\n\nupdate : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n    case msg of\n        OnUrlRequest urlRequest ->\n            -- TODO\n            ( model, Cmd.none )\n\n        OnUrlChange urlUrl ->\n            -- TODO\n            ( model, Cmd.none )\n\n        OnMsgFromServer (Err err) ->\n            -- http error\n            ( { model | serverGreeting = Debug.toString err }, Cmd.none )\n\n        OnMsgFromServer (Ok (Err err)) ->\n            -- error from Server.elm\n            ( { model | serverGreeting = \"app error: \" ++ err }, Cmd.none )\n\n        OnMsgFromServer (Ok (Ok serverMsg)) ->\n            updateFromServer serverMsg model\n\n        SendMessage clientMsg ->\n            -- ( model, websocketOut (Json.Encode.encode 0 (Types.encodeTypesMsgFromClient clientMsg)) )\n            ( model, Task.attempt OnMsgFromServer (sendToServer clientMsg) )\n\n        SetGreeting s ->\n            ( { model | greeting = s }, Cmd.none )\n\n\nupdateFromServer : Types.MsgFromServer -> Model -> ( Model, Cmd Msg )\nupdateFromServer serverMsg model =\n    case serverMsg of\n        Types.CurrentGreeting s ->\n            ( { model | serverGreeting = s }, Cmd.none )\n\n\nsubscriptions : Model -> Sub Msg\nsubscriptions model =\n    Sub.none\n","document":"module Document exposing (..)\n\nimport Browser\nimport Browser.Navigation\nimport Fullstack.Client\nimport Html exposing (Html, button, div, form, input, text)\nimport Html.Attributes exposing (type_)\nimport Html.Events exposing (onClick, onInput, onSubmit)\nimport Http\nimport Json.Decode\nimport Json.Encode\nimport Platform exposing (Task)\nimport Task\nimport Types\nimport Url\n\n\n\n-- port websocketConnected : (Int -> msg) -> Sub msg\n--\n--\n-- port websocketIn : (String -> msg) -> Sub msg\n--\n--\n-- port websocketOut : String -> Cmd msg\n\n\nfullstack =\n    Fullstack.Client.document\n        { document =\n            { init = init\n            , view = view\n            , update = update\n            , subscriptions = subscriptions\n            }\n        , ports =\n            { websocketConnected = \\_ -> Sub.none -- websocketConnected\n            , websocketIn = \\_ -> Sub.none -- websocketIn\n            }\n        , protocol =\n            { updateFromServer = updateFromServer\n            , clientMsgEncoder = Types.encodeTypesMsgFromClient\n            , serverMsgDecoder = Types.decodeTypesMsgFromServer\n            , errorDecoder = Json.Decode.string\n            }\n        }\n\n\nmain =\n    fullstack.document\n\n\n{-| Clients send messages to Server with this\n-}\nsendToServer : Types.MsgFromClient -> Task Http.Error (Result String Types.MsgFromServer)\nsendToServer =\n    fullstack.sendToServer\n\n\ntype alias Flags =\n    {}\n\n\ntype alias Model =\n    { greeting : String\n    , serverGreeting : String\n    }\n\n\ntype Msg\n    = OnMsgFromServer (Result Http.Error (Result String Types.MsgFromServer))\n    | SendMessage Types.MsgFromClient\n    | SetGreeting String\n\n\ninit : Flags -> ( Model, Cmd Msg )\ninit flags =\n    ( { greeting = \"\"\n      , serverGreeting = \"\"\n      }\n    , Cmd.none\n    )\n\n\nview : Model -> Browser.Document Msg\nview model =\n    Browser.Document \"Elm Fullstack Client\"\n        [ form [ onSubmit (SendMessage (Types.SetGreeting model.greeting)) ]\n            [ input [ onInput SetGreeting ] []\n            , button [ type_ \"submit\" ] [ text \"Send to server\" ]\n            ]\n        , if model.serverGreeting == \"\" then\n            text \"\"\n\n          else\n            div []\n                [ text \"Server reply: \"\n                , text model.serverGreeting\n                ]\n        ]\n\n\nupdate : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n    case msg of\n        OnMsgFromServer (Err err) ->\n            -- http error\n            ( { model | serverGreeting = Debug.toString err }, Cmd.none )\n\n        OnMsgFromServer (Ok (Err err)) ->\n            -- error from Server.elm\n            ( { model | serverGreeting = \"app error: \" ++ err }, Cmd.none )\n\n        OnMsgFromServer (Ok (Ok serverMsg)) ->\n            updateFromServer serverMsg model\n\n        SendMessage clientMsg ->\n            -- ( model, websocketOut (Json.Encode.encode 0 (Types.encodeTypesMsgFromClient clientMsg)) )\n            ( model, Task.attempt OnMsgFromServer (sendToServer clientMsg) )\n\n        SetGreeting s ->\n            ( { model | greeting = s }, Cmd.none )\n\n\nupdateFromServer : Types.MsgFromServer -> Model -> ( Model, Cmd Msg )\nupdateFromServer serverMsg model =\n    case serverMsg of\n        Types.CurrentGreeting s ->\n            ( { model | serverGreeting = s }, Cmd.none )\n\n\nsubscriptions : Model -> Sub Msg\nsubscriptions model =\n    Sub.none\n","element":"module Element exposing (..)\n\nimport Browser\nimport Browser.Navigation\nimport Fullstack.Client\nimport Html exposing (Html, button, div, form, input, text)\nimport Html.Attributes exposing (type_)\nimport Html.Events exposing (onClick, onInput, onSubmit)\nimport Http\nimport Json.Decode\nimport Json.Encode\nimport Platform exposing (Task)\nimport Task\nimport Types\nimport Url\n\n\n\n-- port websocketConnected : (Int -> msg) -> Sub msg\n--\n--\n-- port websocketIn : (String -> msg) -> Sub msg\n--\n--\n-- port websocketOut : String -> Cmd msg\n\n\nfullstack =\n    Fullstack.Client.element\n        { element =\n            { init = init\n            , view = view\n            , update = update\n            , subscriptions = subscriptions\n            }\n        , ports =\n            { websocketConnected = \\_ -> Sub.none -- websocketConnected\n            , websocketIn = \\_ -> Sub.none -- websocketIn\n            }\n        , protocol =\n            { updateFromServer = updateFromServer\n            , clientMsgEncoder = Types.encodeTypesMsgFromClient\n            , serverMsgDecoder = Types.decodeTypesMsgFromServer\n            , errorDecoder = Json.Decode.string\n            }\n        }\n\n\nmain =\n    fullstack.element\n\n\n{-| Clients send messages to Server with this\n-}\nsendToServer : Types.MsgFromClient -> Task Http.Error (Result String Types.MsgFromServer)\nsendToServer =\n    fullstack.sendToServer\n\n\ntype alias Flags =\n    {}\n\n\ntype alias Model =\n    { greeting : String\n    , serverGreeting : String\n    }\n\n\ntype Msg\n    = OnMsgFromServer (Result Http.Error (Result String Types.MsgFromServer))\n    | SendMessage Types.MsgFromClient\n    | SetGreeting String\n\n\ninit : Flags -> ( Model, Cmd Msg )\ninit flags =\n    ( { greeting = \"\"\n      , serverGreeting = \"\"\n      }\n    , Cmd.none\n    )\n\n\nview : Model -> Html.Html Msg\nview model =\n    div []\n        [ form [ onSubmit (SendMessage (Types.SetGreeting model.greeting)) ]\n            [ input [ onInput SetGreeting ] []\n            , button [ type_ \"submit\" ] [ text \"Send to server\" ]\n            ]\n        , if model.serverGreeting == \"\" then\n            text \"\"\n\n          else\n            div []\n                [ text \"Server reply: \"\n                , text model.serverGreeting\n                ]\n        ]\n\n\nupdate : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n    case msg of\n        OnMsgFromServer (Err err) ->\n            -- http error\n            ( { model | serverGreeting = Debug.toString err }, Cmd.none )\n\n        OnMsgFromServer (Ok (Err err)) ->\n            -- error from Server.elm\n            ( { model | serverGreeting = \"app error: \" ++ err }, Cmd.none )\n\n        OnMsgFromServer (Ok (Ok serverMsg)) ->\n            updateFromServer serverMsg model\n\n        SendMessage clientMsg ->\n            -- ( model, websocketOut (Json.Encode.encode 0 (Types.encodeTypesMsgFromClient clientMsg)) )\n            ( model, Task.attempt OnMsgFromServer (sendToServer clientMsg) )\n\n        SetGreeting s ->\n            ( { model | greeting = s }, Cmd.none )\n\n\nupdateFromServer : Types.MsgFromServer -> Model -> ( Model, Cmd Msg )\nupdateFromServer serverMsg model =\n    case serverMsg of\n        Types.CurrentGreeting s ->\n            ( { model | serverGreeting = s }, Cmd.none )\n\n\nsubscriptions : Model -> Sub Msg\nsubscriptions model =\n    Sub.none\n"}

  return dict[key]
}
